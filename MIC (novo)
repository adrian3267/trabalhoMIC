#start=DAS5332_raiz.exe#
#start=LED_Display.exe#
#start=Printer.exe#       
      
data segment
    iniciou DB 0
    nivel DW 00H
    
    NIVELMAX EQU 50D
    armazena_chaves DB 00H
    
    LEDS EQU 21H
    CHAVES EQU 20H
    
    DISPLAY EQU 0C7H  ;define display LCD
    
    PRINTER EQU 082H  
    
    sequencia DB NIVELMAX DUP(0)
    fim_sequencia DB ?
ends

stack segment
    DW   16  dup(0)
ends       

interrupt segment   
    trata90h:
        MOV iniciou, 1
        IRET
        
    trata91h:
        MOV iniciou, 0
        IRET
        
    
interrupt ends

code segment
    ;---------------CONFIGURACAO---------------;
    config_interrupt PROC
        MOV AX, interrupt
        MOV DS, AX
        
        MOV DX, offset trata90h
        MOV AL, 90h
        MOV AH, 25h  ;;21/25 usa DS:DX
        INT 21h
        
        MOV DX, offset trata91h
        MOV AL, 91h
        MOV AH, 25h
        INT 21h
        
        RET
    config_interrupt ENDP
    
    generate_random PROC
        MOV AH, 00  ;Interrupcao 1A/00
        INT 1AH     ;CX:DX recebe o numero de ticks do clock desde a meia noite   
        
        MOV AX, DX
        XOR DX, DX ;DX = 0
        MOV CX, 8  ;CX = 10
        DIV CX     ;AX = AX/CX -> resto vai para DX->numero entre 0 e 7
        INC DX     ;Agora DX esta entre 1 e 8
        
        RET
    generate_random ENDP
    
    atraso PROC
        MOV CX, 099H
        ciclo:
            LOOP ciclo 
        
            RET
        
    atraso ENDP 
               
               
    atraso_maior PROC
        MOV CX, 1FFH
        ciclo2:
            LOOP ciclo2 
        
            RET
        
    atraso_maior ENDP
   
    conversor PROC
        MOV CL, sequencia[SI]
        DEC CL   ;registra o valor de rotacoes (n-1), pois se o valor for 1 sao necessarias 0 rotacoes
        MOV AL,01H
        
        ROL AL, CL  ;passa para AL o valor-posicao que deve ser acesso
        
        RET
    conversor ENDP
           
         
    
    ;---------------Programa Principal---------------;
START:
    MOV AL, 00H
    OUT LEDS, AL
    MOV AL, 01H
    OUT DISPLAY, AL
    CALL config_interrupt
    MOV AX, data
    MOV DS, AX
    MOV ES, AX
    
    
STANDBY:
    CMP iniciou, 1
    JNE STANDBY
    CALL atraso_maior
    
INSERE_ALEATORIO:
    MOV SI, nivel
    CALL generate_random
    MOV sequencia[SI], DL
    INC SI
    MOV nivel, SI
    
    MOV AX, nivel
    OUT DISPLAY, AX  ;Passa o nivel atual para o DISPLAY
    
    MOV SI, 00H
    
      

ESCRITOR:
    CALL conversor
    INC SI
    OUT LEDS,AL
    CALL atraso
    MOV AL, 00H
    OUT LEDS,AL
    CALL atraso
    CMP SI,nivel
    JE INPUT   
    JMP ESCRITOR

INPUT:
    MOV SI, 00H
    
    espera_ligar:
        IN AL, CHAVES  ;aguarda o jogador selecionar a chave correta
        CMP AL, 00H
        JE espera_ligar
        MOV armazena_chaves, AL ;salva a chave selecionada
    
    espera_desligar:
        IN AL, CHAVES           ;aguarda a chave ser desativada
        CMP AL, 00H
        JNE espera_desligar
          
        CALL conversor          ;Converte sequencia[SI] para binario
        CMP AL, armazena_chaves
        JNE REINICIA            ;ve se o jogador acertou a chave
    
    INC SI             ;incrementa o SI que fara com que o sequencia[SI] pegue o prox. elemento
    CMP SI, nivel      ;compara com o nivel atual para saber se deve receber mais um valor
    JNE espera_ligar   ;se deve receber, volta para espera_ligar 
        
        
 
;;;Isso so funciona quando o programa roda devagar 
;;;Quando nao tem aquele 'delay' na execucao, buga     
;;;Tentem arrumar, qualquer coisa nem colocamos
;IMPRIME:
;    MOV AL, 56H    ;V
;    OUT PRINTER,AL
;    MOV AL, 6FH
;    OUT PRINTER,AL ;o
;    MOV AL, 63H
;    OUT PRINTER,AL ;c
;    MOV AL, 65H
;    OUT PRINTER,AL ;e    
;    MOV AL, 20H
;    OUT PRINTER,AL ;(space)
;    MOV AL, 70H
;    OUT PRINTER,AL ;p
;    MOV AL, 61H
;    OUT PRINTER,AL ;a
;    MOV AL, 73H
;    OUT PRINTER,AL ;s
;    MOV AL, 73H
;    OUT PRINTER,AL ;s
;    MOV AL, 6FH
;    OUT PRINTER,AL ;o
;    MOV AL, 75H
;    OUT PRINTER,AL ;u
;    MOV AL, 20H
;    OUT PRINTER,AL ;(space)
;    MOV AL, 64H
;    OUT PRINTER,AL ;d
;    MOV AL, 65H
;    OUT PRINTER,AL ;e
;    MOV AL, 20H
;    OUT PRINTER,AL ;(space)
;    MOV AL, 6EH
;    OUT PRINTER,AL ;n
;    MOV AL, 69H
;    OUT PRINTER,AL ;i
;    MOV AL, 76H
;    OUT PRINTER,AL ;v
;    MOV AL, 65H
;    OUT PRINTER,AL ;e
;    MOV AL, 6CH
;    OUT PRINTER,AL ;l
;    MOV AL, 20H
;    OUT PRINTER,AL ;(space)
;    MOV AL, 50H
;    OUT PRINTER,AL ;P
;    MOV AL, 52H
;    OUT PRINTER,AL ;R
;    MOV AL, 45H
;    OUT PRINTER,AL ;E
;    MOV AL, 50H
;    OUT PRINTER,AL ;P
;    MOV AL, 41H
;    OUT PRINTER,AL ;A
;    MOV AL, 52H
;    OUT PRINTER,AL ;R
;    MOV AL, 45H
;    OUT PRINTER,AL ;E
;    MOV AL, 2DH
;    OUT PRINTER,AL ;-
;    MOV AL, 53H
;    OUT PRINTER,AL ;S
;    MOV AL, 45H
;    OUT PRINTER,AL ;E
;    MOV AL, 21H
;    OUT PRINTER,AL ;!
     
    
    
    
DELAY:
    CALL atraso_maior
    CMP nivel, NIVELMAX
    JE PARABENS
    JMP INSERE_ALEATORIO
                                
                                

REINICIA:
    ;;Print: Voce e um perdedor
    espera_interrupt:
        CMP iniciou, 0
        JNE espera_interrupt
        MOV nivel, 0H
        JMP STANDBY
    
PARABENS:
;;Print: Voce passou todos os niveis existentes
;;Print; PARABENS!
   espera_interrupt2:
       CMP iniciou, 0
       JNE espera_interrupt2
       MOV nivel, 0H
       JMP STANDBY                 
    
ends

end START ; set entry point and stop the assembler.
